import math
def create_adjacency_list():
    adj_list = {
        0: [132,111],
        1: [43],
        2: [119,30],
        3: [76,77],
        4: [70,142],
        5: [],
        6: [],
        7: [84,78,83,115],
        8: [],
        9: [72,105],
        10: [107,141],
        11: [],
        12: [129],
        13: [91,92],
        14: [57],
        15: [92,102],
        16: [65,64],
        17: [],
        18: [84,126],
        19: [62,53,1,],
        20: [5,111,86,87],
        21: [],
        22: [],
        23: [57,14],
        24: [39,122,76,75],
        25: [0,93],
        26: [141],
        27: [85,107],
        28: [],
        29: [],
        30: [119],
        31: [129],
        32: [89,90],
        33: [],
        34: [59,64,66,37],
        35: [132,108],
        36: [],
        37: [124],
        38: [],
        39: [57],
        40: [120,119],
        41: [50, 61, 51, 53, 54,67],
        42: [1,55, 53, 73],
        43: [73,14],
        44: [113,66],
        45: [23,46,56],
        46: [73],
        47: [63],
        48: [114],
        #pathing
        49: [50],
        50: [49, 51, 41],
        51: [50, 62, 53],
        52: [62],
        53: [1,51, 41],
        54: [55, 61,70],
        55: [54,95],
        56: [37],
        57: [23, 14,58,56,123],
        58: [28,38,89,136,36],
        59: [56],
        60: [],
        61: [50, 54],
        62: [51, 19],
        63: [71],
        64: [47],
        65: [66,44],
        66: [],
        67: [41],
        68: [73,57,23,14],
        69: [],
        70: [4],
        71: [105,59],
        72: [105],
        73: [42, 46],
        74: [129],
        75: [136,76],
        76: [],
        77: [78,130,76],
        78: [79],
        79: [112,106],
        80: [21],
        81: [12,80,129,103],
        82: [126],
        83: [],
        84: [85,131,82],
        85: [78,87],
        86: [110,21],
        87: [86,94],
        88: [17,97,8],
        89: [90],
        90: [32],
        91: [],
        92: [91,102],
        93: [133,141,26],
        94: [93,27],
        95:[56,55,72],
        96:[33,22,17],
        97:[],
        98:[],
        99:[98],
        100:[],
        101:[],
        102:[109],
        103:[11,104,90],
        104:[36],
        106:[21,80],
        107:[131],
        108:[110,111],
        110:[109],
        111:[5,0],
        112:[87],
        113:[118],
        114:[120],
        115:[117,83,82],
        116:[82,48],
        118:[120,119],
        121:[122,76],
        122:[123],
        123:[124],
        124:[125,56],
        125:[121,66,74],
        126:[29],
        127:[91,80],
        128:[75,78,31],
        129:[140],
        130:[125,77,83],
        132:[111],
        133:[134,26],
        134:[135,35],
        135:[6],
        136:[74,104],
        137:[138,90,88],
        138:[139,11,8],
        139:[81],
        140:[79,129,12],
        142:[4,55],
        143:[139,91,8],
        144:[109],
        145:[146,144],
        146:[6],
        147:[29,126,131],
        148:[81,103,139,11]

    }
    return adj_list

def create_undirected_adjacency_list(edges):
    adj_list = {}
    for node, neighbors in edges.items():
        for neighbor in neighbors:
            if node not in adj_list:
                adj_list[node] = []
            if neighbor not in adj_list:
                adj_list[neighbor] = []
            adj_list[node].append(neighbor)
            adj_list[neighbor].append(node)

    return adj_list

def calc_weights(adj_list, current_nodes):
    weighted_adj_list = {}
    for node, neighbors in adj_list.items():
        weighted_adj_list[node] = []
        for neighbor in neighbors:
            x1, y1 = current_nodes[node][0]
            x2, y2 = current_nodes[neighbor][0]
            distance_float = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
            distance = int(distance_float)
            weighted_adj_list[node].append((neighbor, distance))
    #print(weighted_adj_list)
    return weighted_adj_list
